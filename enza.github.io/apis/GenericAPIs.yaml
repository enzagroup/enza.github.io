openapi: 3.0.1
info:
  title: Enza REST API Documentation
  description: |
    **Welcome to the Enza REST API Developer Portal. Our API provides seamless integration for instant issuing services across Africa. This portal offers all the necessary tools, detailed documentation, and API endpoints required to empower your financial operations with real-time card issuance capabilities. Explore the portal, integrate with ease, and unlock secure, efficient, and scalable instant issuing solutions.**
  version: 2025-02-16T14:26:47Z

servers:
  - url: https://uat-api.enza.cloud/TX/v1

tags:
  - name: "Customers"
  - name: "Accounts"
  - name: "Card Management"
  - name: "Instant Issuing"


paths:
  ##Customer
  ##CARDS
  ##1. 
  /cards/by-rid/{rid}:
    get:
      summary: Get Card Info
      description: Retrieve detailed information of a card by its RID (External ID).
      tags:
        - Cards
      parameters:
        - name: rid
          in: path
          required: true
          description: The unique identifier for the card (External RID).
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved card information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  card:
                    type: object
                    properties:
                      rid:
                        type: string
                        description: The card external RID.
                      status:
                        type: string
                        description: The current status of the card.
                      pan:
                        type: string
                        description: The Primary Account Number (PAN) of the card.
                      exp_time:
                        type: string
                        format: date-time
                        description: Expiration time of the card.
        '404':
          description: Card not found.


  ##2.
  /cards/activate:
    post:
      summary: Activate Card
      description: Activate a card by providing the CardStatus and CardRefNum.
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      tags:
        - Cards
      requestBody:
        description: Details for activating a card.
        content:
          application/json:
            schema:
              type: object
              required:
              - CardStatus    
              - CardRefNum    
              properties:
                CardStatus:
                  type: string
                  enum: [Active, Deactivated,New,Blocked,Referral,Lost,Stolen,Damaged,Compromised,Closed]
                  description: The status of the card.
                CardRefNum:
                  type: string
                  description: The CardRefNum of the card to be activated.

      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: "Card Activated successfully!"
              examples:
                successResponse:
                  summary: Successful Request Example
                  value:
                    message: "Card Activated successfully!"
        "400":
          description: Bad request response "Wrong Field in the body request"
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage  # Making errorMessage required at the root level
                properties:
                  errorMessage:
                    type: object
                    required:
                      - errorType
                      - statusCode
                      - errorDetails
                    properties:
                      errorType:
                        description: "Bad Request: Invalid Request Body"
                        type: string
                      statusCode:
                        description: "400"
                        type: integer
                      errorDetails:
                        type: array
                        items:
                          type: object
                          required:
                            - instancePath
                            - schemaPath
                            - keyword
                            - params
                            - message
                          properties:
                            instancePath:
                              description: "'/body' JSON Pointer to the part of the request body that caused the error"
                              type: string
                            schemaPath:
                              description: "'#/properties/body/required' JSON Schema path indicating the validation rule that failed"
                              type: string
                            keyword:
                              description: "'required' Validation keyword that failed"
                              type: string
                            params:
                              description: "Additional parameters about the validation failure"
                              type: object
                              required:
                                -missingProperty
                              properties:
                                missingProperty:
                                  type: string
                            message:
                              description: "Error message describing the validation failure field"
                              type: string
              examples:
                badRequestExample:
                  summary: Bad Request - Missing Required Property
                  value:
                    errorMessage:
                      errorType: "Bad Request: Invalid Request Body"
                      statusCode: 400
                      errorDetails:
                        - instancePath: "/body"
                          schemaPath: "#/properties/body/required"
                          keyword: "required"
                          params:
                            missingProperty: "CardRefNum or CardStatus"
                          message: "must have required property"
        "500":
          description: Internal server error response
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: object
                    required:
                      - errorType
                      - statusCode
                      - errorDetails
                    properties:
                      errorType:
                        description: "This Card Is Already Activated"
                        type: string
                      statusCode:
                        description: "500"
                        type: integer
                      errorDetails:
                        type: array
                        items:
                          type: object
                          required:
                            - message
                          properties:
                            message:
                              description: "This Card Is Already Activated"
                              type: string
              examples:
                internalServerErrorExample:
                  summary: This Card Is Already Activated
                  value:
                    errorMessage:
                      errorType: "This Card Is Already Activated"
                      statusCode: "500"
                      errorDetails:
                        - message: "This Card Is Already Activated"
        "504":
          description: Gateway Timeout error response
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: object
                    required:
                      - errorType
                      - statusCode
                      - errorDetails
                    properties:
                      errorType:
                        type: string
                        description: "Gateway Timeout"
                      statusCode:
                        type: integer
                        description: "504"
                      errorDetails:
                        type: array
                        items:
                          type: object
                          properties:
                            message:
                              description: "Task timed out after 2.02 seconds"
                              type: string
              examples:
                gatewayTimeoutExample:
                  summary: Gateway Timeout Example
                  value:
                    errorMessage:
                      errorType: "Gateway Timeout"
                      statusCode: 504
                      errorDetails:
                        - message: "Task timed out after 2.02 seconds"

  /cards/deletetoken:
    post:
      summary: DeleteToken Request
      description: Remove a token associated with a card using the CardRefNum.
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      tags:
        - Cards
      requestBody:
        description: Details for deleting a token.
        content:
          application/json:
            schema:
              type: object
              required:
                - CardRefNum
              properties:
                CardRefNum:
                  type: string
                  description: The reference number of the card whose token is being deleted.
      responses:
        "200":
          description: Successfully deleted the token.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: Confirmation message that the token is deleted.
              examples:
                successResponse:
                  summary: Successful Token Deletion
                  value:
                    message: "Success, Token is Deleted!"
        "400":
          description: Bad request response "Wrong Field in the body request"
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage  # Making errorMessage required at the root level
                properties:
                  errorMessage:
                    type: object
                    required:
                      - errorType
                      - statusCode
                      - errorDetails
                    properties:
                      errorType:
                        description: "Bad Request: Invalid Request Body"
                        type: string
                      statusCode:
                        description: "400"
                        type: integer
                      errorDetails:
                        type: array
                        items:
                          type: object
                          required:
                            - instancePath
                            - schemaPath
                            - keyword
                            - params
                            - message
                          properties:
                            instancePath:
                              description: "'/body' JSON Pointer to the part of the request body that caused the error"
                              type: string
                            schemaPath:
                              description: "'#/properties/body/required' JSON Schema path indicating the validation rule that failed"
                              type: string
                            keyword:
                              description: "'required' Validation keyword that failed"
                              type: string
                            params:
                              description: "Additional parameters about the validation failure"
                              type: object
                              required:
                                -missingProperty
                              properties:
                                missingProperty:
                                  type: string
                            message:
                              description: "Error message describing the validation failure field"
                              type: string
              examples:
                badRequestExample:
                  summary: Bad Request - Missing Required Property "CardRefNum"
                  value:
                    errorMessage:
                      errorType: "Bad Request: Invalid Request Body"
                      statusCode: 400
                      errorDetails:
                        - instancePath: "/body"
                          schemaPath: "#/properties/body/required"
                          keyword: "required"
                          params:
                            missingProperty: "CardRefNum"
                          message: "must have required property `CardRefNum`"
        "500":
          description: Token not found for the provided CardRefNum.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: string
                    description: No token was found.
              examples:
                notFoundExample:
                  summary: Token Not Found
                  value:
                    errorMessage: "Token not found for the provided CardRefNum."
        "504":
          description: Internal server error while processing the request.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: string
                    description: Explanation of the server error.
              examples:
                internalServerErrorExample:
                  summary: Server Error Example
                  value:
                    errorMessage: "Internal server error. Please try again later."

  /cards/retrievetransactions:
    post:
      summary: Retrieve Card Transactions
      description: Retrieve a list of transactions associated with a specific card.
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      tags:
        - Cards
      requestBody:
        description: Details for fetching transactions.
        content:
          application/json:
            schema:
              type: object
              required:
                - CardRefNum
              properties:
                CardRefNum:
                  type: string
                  description: The reference number of the card whose transactions are being retrieved.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - Kind
                  - HasMore
                properties:
                  Kind:
                    type: string
                    description: The type of response, indicating transactions.
                  HasMore:
                    type: boolean
                    description: Indicates if there are more transactions available beyond the current response.
              examples:
                successResponse:
                  summary: Successful Transactions Retrieval
                  value:
                    Kind: "Transactions"
                    HasMore: false
        "400":
          description: Bad request due to invalid input.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: string
                    description: Explanation of what went wrong.
              examples:
                badRequestExample:
                  summary: Invalid Request Example
                  value:
                    errorMessage: "Invalid CardRefNum provided."
        "500":
          description: Internal server error while processing the request.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: string
                    description: No transactions found for the provided CardRefNum.
              examples:
                internalServerErrorExample:
                  summary: Server Error Example
                  value:
                    errorMessage: "No transactions found for the provided CardRefNum."
        "504":
          description: Gateway Timeout error response
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: object
                    required:
                      - errorType
                      - statusCode
                      - errorDetails
                    properties:
                      errorType:
                        type: string
                        description: "Gateway Timeout"
                      statusCode:
                        type: integer
                        description: "504"
                      errorDetails:
                        type: array
                        items:
                          type: object
                          properties:
                            message:
                              description: "Task timed out after 2.02 seconds"
                              type: string
              examples:
                gatewayTimeoutExample:
                  summary: Gateway Timeout Example
                  value:
                    errorMessage:
                      errorType: "Gateway Timeout"
                      statusCode: 504
                      errorDetails:
                        - message: "Task timed out after 2.02 seconds"

  /cards/createcard:
    post:
      summary: Create a New Card
      description: Create a new card by providing a unique CardRefNum.
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      tags:
        - Cards
      requestBody:
        description: Details for creating a new card.
        content:
          application/json:
            schema:
              type: object
              required:
                - CardRefNum
              properties:
                CardRefNum:
                  type: string
                  description: The reference number for the new card.
      responses:
        "200":
          description: Card successfully created.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: Card created successfully!.
              examples:
                successResponse:
                  summary: Card Created Successfully
                  value:
                    message: "Success, CardCreated!"
        "400":
          description: Bad request due to invalid input.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: string
                    description: Invalid CardRefNum provided.
              examples:
                badRequestExample:
                  summary: Invalid Request Example
                  value:
                    errorMessage: "Invalid CardRefNum provided."
        "500":
          description: Internal server error while processing the request.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: string
                    description: Card with this reference number already exists.
              examples:
                internalServerErrorExample:
                  summary: Server Error Example
                  value:
                    errorMessage: "Card with this reference number already exists."
        "504":
          description: Gateway Timeout error response
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: object
                    required:
                      - errorType
                      - statusCode
                      - errorDetails
                    properties:
                      errorType:
                        type: string
                        description: "Gateway Timeout"
                      statusCode:
                        type: integer
                        description: "504"
                      errorDetails:
                        type: array
                        items:
                          type: object
                          properties:
                            message:
                              description: "Task timed out after 2.02 seconds"
                              type: string
              examples:
                gatewayTimeoutExample:
                  summary: Gateway Timeout Example
                  value:
                    errorMessage:
                      errorType: "Gateway Timeout"
                      statusCode: 504
                      errorDetails:
                        - message: "Task timed out after 2.02 seconds"
  /instantissuing:
    post:
      operationId: instantIssuingRequest
      summary: Instant Issuing Request
      description: |
        ## Overview  
        This API endpoint lets you link a pre-produced card to a customer's account. It works in two ways:  
        1. **New customer:** Create an account *and* link the card.  
        2. **Existing customer:** Create a new account for an existing customer and link the card.  

        ## `RequestType`  
        | Scenario                | Value                       |
        |-------------------------|-----------------------------|
        | New customer            | `NewAccountNewCustomer`     |
        | Existing customer       | `NewAccountExistingCustomer`|

      tags:
        - Instant Issuing
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            example:
              RequestType: NewAccountNewCustomer
              LastName: EEE
              FirstName: Cust02
              BirthDate: 1990-01-20
              Passport: "76238310075"
              Email: test@test.com
              MobilePhone: '9991234567'
              StreetTitle: Baker's Str
              Zip: WC1X 9NX
              AccountNum: AAABBB150573
              CardRefNum: '000515'
              EmbossedName: Cust02 New

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'
              examples:
                directSuccess:
                  summary: Direct success example
                  value:
                    code: SUCCESS_REQUEST_PROCESSED
                    params:
                      requestType: NewAccountNewCustomer

        '400':
          description: Bad request – validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              examples:
                validationFailure:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      missingProperty: RequestType

        '409':
          description: 'Conflict – card already assigned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardAlreadyAssigned'
              examples:
                conflictError:
                  summary: Card already assigned example
                  value:
                    code: ERR_CARD_ALREADY_ASSIGNED
                    params:
                      message: This Card Is Already Assigned To A Customer!

        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                type: object
                required: [errorMessage]
                properties:
                  errorMessage:
                    type: string
                    description: Timeout error message
                    example: Task timed out after 1.10 seconds
              examples:
                lambdaTimeout:
                  summary: Lambda execution timed out
                  value:
                    errorMessage: Task timed out after 1.10 seconds

  /cards/tdsenrollement:
    post:
      operationId: changeEcommerceStatus
      summary: Change E-commerce Status
      description: Modify the e-commerce status for a card by supplying `ECstatusEnable` and the card reference number.
      tags: [Cards]
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        description: Details for updating ECstatus of a card.
        content:
          application/json:
            schema:
              type: object
              required: [ECstatusEnable, CardRefNum]
              properties:
                CardRefNum:
                  type: string
                  description: Card reference number
                ECstatusEnable:
                  type: string
                  description: 'EC status: `"1"` = Enrolled, `"0"` = Not enrolled'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_ECSTATUS_CHANGED
                  params:
                    type: object
                    required:
                      - status
                    properties:
                      status:
                        type: string
                        example: Enabled
              examples:
                successResponse:
                  summary: Successful Request Example
                  value:
                    code: SUCCESS_ECSTATUS_CHANGED
                    params:
                      status: Enabled
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_VALIDATION_FAILED
                  params:
                    type: object
                    required:
                      - missingProperty
                    properties:
                      missingProperty:
                        type: string
                        example: CardRefNum
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      missingProperty: CardRefNum
        '409':
          description: 'Conflict – token not found'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_READTOKEN_DECLINED
                  params:
                    type: object
                    required:
                      - missingProperty
                    properties:
                      missingProperty:
                        type: string
                        example: Token not found
              examples:
                conflictExample:
                  summary: Token not found
                  value:
                    code: ERR_READTOKEN_DECLINED
                    params:
                      missingProperty: Token not found
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /cards/cardstatus:
    post:
      operationId: changeCardStatus
      tags: [Cards]
      summary: Change Card Status
      description: 'Change a card’s status to **Active** or **Deactivated**.'
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - CardStatus
                - CardRefNum
              properties:
                CardStatus:
                  type: string
                  description: Allowed values ⇒ **Active** | **Deactivated**
                  enum: [Active, Deactivated]   # ← this drives the drop-down
                  example: Active
                CardRefNum:
                  type: string
                  description: Unique card reference number.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_CARDSTATUS_CHANGED
                  params:
                    type: object
                    required:
                      - status
                    properties:
                      status:
                        type: string
                        example: Active
              examples:
                successResponse:
                  summary: Successful card-status change
                  value:
                    code: SUCCESS_CARDSTATUS_CHANGED
                    params:
                      status: Active
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_VALIDATION_FAILED
                  params:
                    type: object
                    required:
                      - missingProperty
                    properties:
                      missingProperty:
                        type: string
                        example: CardRefNum
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      missingProperty: CardRefNum
        '409':
          description: 'Conflict – card declined'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_CARD_DECLINED
                  params:
                    type: object
                    required:
                      - reason
                    properties:
                      reason:
                        type: string
                        example: Token not found
              examples:
                conflictExample:
                  summary: 'Card declined – token not found'
                  value:
                    code: ERR_CARD_DECLINED
                    params:
                      reason: Token not found
        '504':
          $ref: '#/components/responses/LambdaTimeout'

components:
  responses:
    LambdaTimeout:
      description: 'Gateway Timeout – task took too long'
      content:
        application/json:
          schema:
            type: object
            required: [errorMessage]
            properties:
              errorMessage:
                type: string
                example: Task timed out after 1.10 seconds
          examples:
            lambdaTimeout:
              summary: Lambda execution timed out
              value:
                errorMessage: Task timed out after 1.10 seconds

  schemas:
    SuccessEnvelope:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          example: SUCCESS_REQUEST_PROCESSED
        params:
          type: object
          required: [requestType]
          properties:
            requestType:
              type: string
              example: NewAccountNewCustomer

    BadRequest:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          example: ERR_VALIDATION_FAILED
        params:
          type: object
          required: [missingProperty]
          properties:
            missingProperty:
              type: string
              example: RequestType

    CardAlreadyAssigned:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          example: ERR_CARD_ALREADY_ASSIGNED
        params:
          type: object
          required: [message]
          properties:
            message:
              type: string
              example: This Card Is Already Assigned To A Customer!

    Customer:
      type: object
      required:
        [RequestType, AccountNum, CardRefNum, EmbossedName,NationalId, Passport, FirstName, LastName]
      properties:
        RequestType:
          type: string
          description: |
            - `NewAccountNewCustomer`: New customer  
            - `NewAccountExistingCustomer`: Existing customer
        CardRefNum:   { type: string }
        EmbossedName: { type: string }
        AccountNum:   { type: string }
        FirstName:
          type: string
          description: Mandatory for new customers
        MiddleName:   { type: string }
        LastName:
          type: string
          description: Mandatory for new customers
        NationalId:
          type: string
          description: Mandatory if Passport is not provided
        Passport:
          type: string
          description: Mandatory if NationalId is not provided
        BirthDate:
          type: string
          format: date          
          pattern: '^\d{4}-\d{2}-\d{2}$'   # enforces YYYY-MM-DD
          description: Date of birth in YYYY-MM-DD format
          example: '1990-01-01'       
        Email:       { type: string, format: email }
        MobilePhone: { type: string }
        StreetTitle: { type: string }
        Zip:         { type: string }

  parameters:
    apiKey:
      name: x-api-key
      in: header
      required: true
      schema:
        type: string
    contentType:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        default: application/json

